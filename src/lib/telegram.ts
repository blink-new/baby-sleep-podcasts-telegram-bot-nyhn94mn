// Telegram Bot API integration
const BOT_TOKEN = '7632815832:AAE-1ZVONGw4lJ4HAfVOXKesR2q79YlSpIc'
const ADMIN_ID = 3840708
const BASE_URL = `https://api.telegram.org/bot${BOT_TOKEN}`

export interface TelegramUser {
  id: number
  first_name: string
  last_name?: string
  username?: string
  is_premium?: boolean
}

export interface TelegramMessage {
  message_id: number
  from: TelegramUser
  chat: {
    id: number
    type: string
  }
  text?: string
  date: number
}

export class TelegramBot {
  private static instance: TelegramBot
  
  static getInstance(): TelegramBot {
    if (!TelegramBot.instance) {
      TelegramBot.instance = new TelegramBot()
    }
    return TelegramBot.instance
  }

  async sendMessage(chatId: number, text: string, options?: any) {
    const response = await fetch(`${BASE_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: 'HTML',
        ...options
      })
    })
    return response.json()
  }

  async sendAudio(chatId: number, audioUrl: string, caption?: string, isProtected = false) {
    const response = await fetch(`${BASE_URL}/sendAudio`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        audio: audioUrl,
        caption,
        protect_content: isProtected, // Prevents forwarding/saving
        parse_mode: 'HTML'
      })
    })
    return response.json()
  }

  async sendInvoice(chatId: number, title: string, description: string, payload: string, prices: Array<{label: string, amount: number}>) {
    const response = await fetch(`${BASE_URL}/sendInvoice`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        title,
        description,
        payload,
        provider_token: '', // Empty for Telegram Stars
        currency: 'XTR', // Telegram Stars currency
        prices,
        protect_content: true
      })
    })
    return response.json()
  }

  async broadcastMessage(userIds: number[], message: string) {
    const results = []
    for (const userId of userIds) {
      try {
        const result = await this.sendMessage(userId, message)
        results.push({ userId, success: result.ok })
      } catch (error) {
        results.push({ userId, success: false, error })
      }
      // Rate limiting - wait 50ms between messages
      await new Promise(resolve => setTimeout(resolve, 50))
    }
    return results
  }

  async setWebhook(url: string) {
    const response = await fetch(`${BASE_URL}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url,
        allowed_updates: ['message', 'callback_query', 'pre_checkout_query']
      })
    })
    return response.json()
  }

  async getMe() {
    const response = await fetch(`${BASE_URL}/getMe`)
    return response.json()
  }

  // Russian messages for the bot
  static readonly MESSAGES = {
    WELCOME: `üåô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å –ø–æ–¥–∫–∞—Å—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∞ –º–∞–ª—ã—à–µ–π!

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ –ø–æ–¥–∫–∞—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É –∫—Ä–µ–ø–∫–æ —Å–ø–∞—Ç—å.

üéÅ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–¥–Ω–æ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø–æ–¥–∫–∞—Å—Ç—É!
‚ú® –ó–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ 599 ‚≠ê - –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞!`,

    FREE_PODCAST_CAPTION: `üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç –¥–ª—è –≤–∞—Å!

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –¥–ª—è —Å–Ω–∞ –º–∞–ª—ã—à–µ–π –∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å –∏—Ö —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É –ø–æ —Ü–µ–Ω–µ —á–∞—à–∫–∏ –∫–æ—Ñ–µ ‚òï

‚ú® –ó–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ - –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞!
üí´ –ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: 599 ‚≠ê`,

    PREMIUM_REQUIRED: `üîí –≠—Ç–æ—Ç –ø–æ–¥–∫–∞—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–æ–º

‚ú® –ó–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ 599 ‚≠ê - –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞!
üí´ –ù–æ–≤—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,

    PAYMENT_SUCCESS: `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! 

üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ô –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –Ω–∞–≤—Å–µ–≥–¥–∞!
üí´ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
üåô –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!`,

    GIFT_RECEIVED: `üéÅ –í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∫–∞—Å—Ç–∞–º –¥–ª—è —Å–Ω–∞!

üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ô –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞–≤—Å–µ–≥–¥–∞!
üí´ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
üåô –ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤!`
  }

  static createInlineKeyboard() {
    return {
      inline_keyboard: [
        [
          { text: '‚ú® –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú (599 ‚≠ê)', callback_data: 'buy_premium' },
          { text: 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –¥—Ä—É–≥—É', callback_data: 'gift_premium' }
        ]
      ]
    }
  }
}

export default TelegramBot