import { serve } from "https://deno.land/std@0.177.0/http/server.ts";

// Bot configuration
const BOT_TOKEN = '7632815832:AAE-1ZVONGw4lJ4HAfVOXKesR2q79YlSpIc';
const ADMIN_ID = 3840708;
const BASE_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

// Simple in-memory storage (in production, use a real database)
const users = new Map();
const podcasts = new Map();
const payments = new Map();
const giftStates = new Map(); // Track gift flow states

// Initialize sample data
function initializeData() {
  podcasts.set('1', {
    id: '1',
    title: '–ö–æ–ª—ã–±–µ–ª—å–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö',
    description: '–£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ –º–µ–ª–æ–¥–∏–∏ –¥–ª—è –∫—Ä–µ–ø–∫–æ–≥–æ —Å–Ω–∞ –º–∞–ª—ã—à–∞',
    audio_url: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.wav',
    is_premium: false,
    upload_date: '2024-01-15',
    duration: 1800
  });

  podcasts.set('2', {
    id: '2',
    title: '–ë–µ–ª—ã–π —à—É–º –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å–Ω–∞',
    description: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Å–Ω–∞',
    audio_url: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.wav',
    is_premium: true,
    upload_date: '2024-01-16',
    duration: 3600
  });

  podcasts.set('3', {
    id: '3',
    title: '–ó–≤—É–∫–∏ –ø—Ä–∏—Ä–æ–¥—ã –¥–ª—è –¥–µ—Ç–µ–π',
    description: '–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–µ –∑–≤—É–∫–∏ –ª–µ—Å–∞ –∏ –æ–∫–µ–∞–Ω–∞',
    audio_url: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.wav',
    is_premium: true,
    upload_date: '2024-01-17',
    duration: 2700
  });
}

// Initialize data on startup
initializeData();

// Telegram API helpers
async function sendMessage(chatId: number, text: string, options: any = {}) {
  const response = await fetch(`${BASE_URL}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      parse_mode: 'HTML',
      ...options
    })
  });
  return response.json();
}

async function sendAudio(chatId: number, audioUrl: string, caption?: string, isProtected = false) {
  const response = await fetch(`${BASE_URL}/sendAudio`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      audio: audioUrl,
      caption,
      protect_content: isProtected,
      parse_mode: 'HTML'
    })
  });
  return response.json();
}

async function sendInvoice(chatId: number, title: string, description: string, payload: string, prices: Array<{label: string, amount: number}>) {
  const response = await fetch(`${BASE_URL}/sendInvoice`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      title,
      description,
      payload,
      provider_token: '',
      currency: 'XTR',
      prices,
      protect_content: true
    })
  });
  return response.json();
}

// Bot messages
const MESSAGES = {
  WELCOME: `üåô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —Å –ø–æ–¥–∫–∞—Å—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∞ –º–∞–ª—ã—à–µ–π!

–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ –ø–æ–¥–∫–∞—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞—à–µ–º—É —Ä–µ–±–µ–Ω–∫—É –∫—Ä–µ–ø–∫–æ —Å–ø–∞—Ç—å.

üéÅ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–¥–Ω–æ–º—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É –ø–æ–¥–∫–∞—Å—Ç—É!
‚ú® –ó–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ 599 ‚≠ê - –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞!`,

  FREE_PODCAST_CAPTION: `üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç –¥–ª—è –≤–∞—Å!

–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –¥–ª—è —Å–Ω–∞ –º–∞–ª—ã—à–µ–π –∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å –∏—Ö —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É –ø–æ —Ü–µ–Ω–µ —á–∞—à–∫–∏ –∫–æ—Ñ–µ ‚òï

‚ú® –ó–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ - –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞!
üí´ –ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: 599 ‚≠ê`,

  PREMIUM_REQUIRED: `üîí –≠—Ç–æ—Ç –ø–æ–¥–∫–∞—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–æ–º

‚ú® –ó–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ 599 ‚≠ê - –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞!
üí´ –ù–æ–≤—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!`,

  PAYMENT_SUCCESS: `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! 

üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ô –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –Ω–∞–≤—Å–µ–≥–¥–∞!
üí´ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
üåô –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!`,

  GIFT_RECEIVED: `üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Ä–æ–∂–¥–µ–Ω–∏–µ–º —Ä–µ–±–µ–Ω–∫–∞! –í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞ —Ç–µ–º—É –¥–µ—Ç—Å–∫–æ–≥–æ —Å–Ω–∞!

üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ô –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞–≤—Å–µ–≥–¥–∞!
üí´ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
üåô –ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–Ω–æ–≤!`,

  ASK_GIFT_USERNAME: `üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø

–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username):

üí° –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ username –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Å—á–µ—Ç –Ω–∞ 599 ‚≠ê
‚úÖ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø`,

  GIFT_INVOICE_SENT: `üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è @{username}

üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
‚ú® –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã @{username} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–æ–¥–∫–∞—Å—Ç–∞–º`,

  GIFT_SUCCESS_SENDER: `‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!

üéÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø
üíå –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –µ–º—É –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
üåô –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫!`,

  GIFT_USERNAME_NOT_FOUND: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
‚Ä¢ Username –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞ (/start)

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.`

};

function createInlineKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: '‚ú® –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø (599 ‚≠ê)', callback_data: 'buy_premium' }
      ],
      [
        { text: 'üéÅ –ü–æ–¥–∞—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø', callback_data: 'gift_premium' }
      ],
      [
        { text: 'üÜì –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ', callback_data: 'try_free' }
      ]
    ]
  };
}

// User management
function ensureUser(telegramUser: any) {
  if (!users.has(telegramUser.id)) {
    users.set(telegramUser.id, {
      id: telegramUser.id,
      username: telegramUser.username,
      first_name: telegramUser.first_name,
      last_name: telegramUser.last_name,
      is_premium: false,
      joined_date: new Date().toISOString(),
      last_active: new Date().toISOString()
    });
  }
  return users.get(telegramUser.id);
}

function grantPremiumAccess(userId: number) {
  const user = users.get(userId);
  if (user) {
    user.is_premium = true;
    user.premium_purchased_at = new Date().toISOString();
    user.last_active = new Date().toISOString();
    users.set(userId, user);
    return true;
  }
  return false;
}

// Gift processing helpers
function findUserByUsername(username: string) {
  const cleanUsername = username.replace('@', '').toLowerCase();
  for (const [userId, user] of users.entries()) {
    if (user.username && user.username.toLowerCase() === cleanUsername) {
      return user;
    }
  }
  return null;
}

function createGiftState(senderId: number, recipientUsername: string, recipientUserId: number) {
  const giftId = `gift_${senderId}_${Date.now()}`;
  const giftState = {
    id: giftId,
    sender_id: senderId,
    recipient_username: recipientUsername,
    recipient_user_id: recipientUserId,
    status: 'pending_payment',
    created_at: new Date().toISOString()
  };
  giftStates.set(giftId, giftState);
  return giftState;
}

async function processGiftPayment(giftId: string) {
  const giftState = giftStates.get(giftId);
  if (!giftState) return false;

  // Grant premium access to recipient
  const success = grantPremiumAccess(giftState.recipient_user_id);
  if (success) {
    giftState.status = 'completed';
    giftState.completed_at = new Date().toISOString();
    giftStates.set(giftId, giftState);

    // Send congratulations message to recipient
    await sendMessage(
      giftState.recipient_user_id,
      MESSAGES.GIFT_RECEIVED
    );

    // Send all premium podcasts to recipient
    const premiumPodcasts = Array.from(podcasts.values()).filter(p => p.is_premium);
    for (const podcast of premiumPodcasts) {
      await sendAudio(
        giftState.recipient_user_id,
        podcast.audio_url,
        `üéµ ${podcast.title}\n\n${podcast.description}`,
        true
      );
      await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // Send success message to sender
    await sendMessage(
      giftState.sender_id,
      MESSAGES.GIFT_SUCCESS_SENDER.replace('{username}', giftState.recipient_username)
    );

    return true;
  }
  return false;
}

// Message handlers
async function handleStart(chatId: number, user: any) {
  await sendMessage(chatId, MESSAGES.WELCOME);
  
  // Send the free podcast immediately
  const freePodcasts = Array.from(podcasts.values()).filter(p => !p.is_premium);
  if (freePodcasts.length > 0) {
    const freePodcast = freePodcasts[0];
    await sendAudio(
      chatId,
      freePodcast.audio_url,
      MESSAGES.FREE_PODCAST_CAPTION,
      false
    );
    
    // Show purchase options
    await sendMessage(
      chatId,
      'üí´ –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏?',
      { reply_markup: createInlineKeyboard() }
    );
  }
}

async function handlePodcastsList(chatId: number, user: any) {
  const allPodcasts = Array.from(podcasts.values());
  
  let message = 'üéµ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã:\n\n';
  
  for (const podcast of allPodcasts) {
    const icon = podcast.is_premium ? 'üîí' : 'üéÅ';
    const access = podcast.is_premium ? 
      (user?.is_premium ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ùå –¢—Ä–µ–±—É–µ—Ç –ø—Ä–µ–º–∏—É–º') : 
      '‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ';
    
    message += `${icon} ${podcast.title}\n${podcast.description}\n${access}\n\n`;
  }

  if (!user?.is_premium) {
    message += '‚ú® –ó–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ 599 ‚≠ê - –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞!';
  }

  await sendMessage(chatId, message, {
    reply_markup: user?.is_premium ? undefined : createInlineKeyboard()
  });
}

async function handleHelp(chatId: number) {
  const helpMessage = `üåô –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/podcasts - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–¥–∫–∞—Å—Ç—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

‚ú® –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø - –∑–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≤—Å–µ–≥–¥–∞:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
‚Ä¢ –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 599 Telegram Stars (‚âà —Ü–µ–Ω–∞ —á–∞—à–∫–∏ –∫–æ—Ñ–µ)
üéØ –û–¥–∏–Ω –ø–ª–∞—Ç–µ–∂ = –¥–æ—Å—Ç—É–ø –Ω–∞–≤—Å–µ–≥–¥–∞!`;

  await sendMessage(chatId, helpMessage);
}

async function handleBuyPremium(chatId: number, userId: number) {
  await sendInvoice(
    chatId,
    '–î–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞',
    '–ó–∞–ø–ª–∞—Ç–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ - –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–æ–≤ –¥–ª—è —Å–Ω–∞ –Ω–∞–≤—Å–µ–≥–¥–∞! –ù–æ–≤—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.',
    `premium_access_${userId}_${Date.now()}`,
    [{ label: '–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–æ–¥–∫–∞—Å—Ç–∞–º –Ω–∞–≤—Å–µ–≥–¥–∞', amount: 599 }]
  );
}

async function handleGiftPremium(chatId: number, userId: number) {
  // Set user state to waiting for username input
  giftStates.set(`waiting_username_${userId}`, {
    status: 'waiting_username',
    sender_id: userId,
    created_at: new Date().toISOString()
  });

  await sendMessage(chatId, MESSAGES.ASK_GIFT_USERNAME);
}

async function handleUsernameInput(chatId: number, userId: number, username: string) {
  // Clean the username
  const cleanUsername = username.replace('@', '').trim();
  
  if (!cleanUsername) {
    await sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username.');
    return;
  }

  // Find recipient user
  const recipient = findUserByUsername(cleanUsername);
  
  if (!recipient) {
    await sendMessage(chatId, MESSAGES.GIFT_USERNAME_NOT_FOUND);
    return;
  }

  // Create gift state
  const giftState = createGiftState(userId, cleanUsername, recipient.id);
  
  // Clear waiting state
  giftStates.delete(`waiting_username_${userId}`);
  
  // Send gift invoice
  await sendMessage(
    chatId,
    MESSAGES.GIFT_INVOICE_SENT.replace('{username}', cleanUsername)
  );
  
  await sendInvoice(
    chatId,
    `–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è @${cleanUsername}`,
    `–ü–æ–¥–∞—Ä–∏—Ç—å –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–æ–¥–∫–∞—Å—Ç–∞–º –¥–ª—è @${cleanUsername}. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç –¥–æ—Å—Ç—É–ø.`,
    giftState.id,
    [{ label: `–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è @${cleanUsername}`, amount: 599 }]
  );
}

async function handleTryFree(chatId: number, user: any) {
  // Send the free podcast
  const freePodcasts = Array.from(podcasts.values()).filter(p => !p.is_premium);
  if (freePodcasts.length > 0) {
    const freePodcast = freePodcasts[0];
    await sendAudio(
      chatId,
      freePodcast.audio_url,
      `üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–∫–∞—Å—Ç: ${freePodcast.title}\n\n${freePodcast.description}\n\n${MESSAGES.FREE_PODCAST_CAPTION}`,
      false
    );
  } else {
    await sendMessage(
      chatId,
      'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–∫–∞—Å—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!',
      { reply_markup: createInlineKeyboard() }
    );
  }
}

async function handleSuccessfulPayment(message: any) {
  const userId = message.from.id;
  const chatId = message.chat.id;
  const payment = message.successful_payment;
  const payload = payment.invoice_payload;

  // Record payment
  const paymentRecord = {
    id: Date.now().toString(),
    user_id: userId,
    amount: payment.total_amount,
    currency: payment.currency,
    status: 'completed',
    telegram_payment_charge_id: payment.telegram_payment_charge_id,
    payload: payload,
    created_at: new Date().toISOString()
  };
  payments.set(paymentRecord.id, paymentRecord);

  // Check if this is a gift payment
  if (payload.startsWith('gift_')) {
    await processGiftPayment(payload);
    return;
  }

  // Regular premium purchase
  grantPremiumAccess(userId);
  
  // Send success message
  await sendMessage(chatId, MESSAGES.PAYMENT_SUCCESS);
  
  // Send all premium podcasts
  const premiumPodcasts = Array.from(podcasts.values()).filter(p => p.is_premium);
  
  for (const podcast of premiumPodcasts) {
    await sendAudio(
      chatId,
      podcast.audio_url,
      `üéµ ${podcast.title}\n\n${podcast.description}`,
      true
    );
    
    // Small delay between sends
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
}

// Main webhook handler
serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization',
      },
    });
  }

  if (req.method === 'GET') {
    return new Response(JSON.stringify({ 
      status: 'Bot is running!',
      users: users.size,
      podcasts: podcasts.size,
      payments: payments.size
    }), {
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    });
  }

  if (req.method === 'POST') {
    try {
      const update = await req.json();
      console.log('Received update:', JSON.stringify(update, null, 2));

      // Handle regular messages
      if (update.message) {
        const message = update.message;
        const user = message.from;
        const chatId = message.chat.id;
        const text = message.text || '';

        // Ensure user exists
        ensureUser(user);
        const dbUser = users.get(user.id);

        if (text === '/start') {
          await handleStart(chatId, dbUser);
        } else if (text === '/podcasts' || text === '–ü–æ–¥–∫–∞—Å—Ç—ã') {
          await handlePodcastsList(chatId, dbUser);
        } else if (text === '/help' || text === '–ü–æ–º–æ—â—å') {
          await handleHelp(chatId);
        } else if (message.successful_payment) {
          await handleSuccessfulPayment(message);
        } else {
          // Check if user is waiting for username input
          const waitingState = giftStates.get(`waiting_username_${user.id}`);
          if (waitingState && waitingState.status === 'waiting_username') {
            await handleUsernameInput(chatId, user.id, text);
          } else {
            await sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.');
          }
        }
      }

      // Handle callback queries (button presses)
      if (update.callback_query) {
        const callbackQuery = update.callback_query;
        const chatId = callbackQuery.message.chat.id;
        const userId = callbackQuery.from.id;
        const data = callbackQuery.data;

        if (data === 'buy_premium') {
          await handleBuyPremium(chatId, userId);
        } else if (data === 'gift_premium') {
          await handleGiftPremium(chatId, userId);
        } else if (data === 'try_free') {
          const dbUser = users.get(userId);
          await handleTryFree(chatId, dbUser);
        }

        // Answer callback query
        await fetch(`${BASE_URL}/answerCallbackQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            callback_query_id: callbackQuery.id
          })
        });
      }

      // Handle pre-checkout queries
      if (update.pre_checkout_query) {
        await fetch(`${BASE_URL}/answerPreCheckoutQuery`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            pre_checkout_query_id: update.pre_checkout_query.id,
            ok: true
          })
        });
      }

      return new Response(JSON.stringify({ ok: true }), {
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });

    } catch (error) {
      console.error('Error processing update:', error);
      return new Response(JSON.stringify({ 
        error: 'Internal server error',
        details: error.message 
      }), {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*',
        },
      });
    }
  }

  return new Response('Method not allowed', { status: 405 });
});